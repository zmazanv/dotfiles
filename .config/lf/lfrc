# # # # # # # # # # # # # # # # # # # #
# $HOME/.config/lf/lfrc
#
# zmazanv (Sebastián Zavala Villagómez)
# [https://github.com/zmazanv]
# [https://gitlab.com/zmazanv]
#
# LFRC
# ██╗░░░░░███████╗██████╗░░█████╗░
# ██║░░░░░██╔════╝██╔══██╗██╔══██╗
# ██║░░░░░█████╗░░██████╔╝██║░░╚═╝
# ██║░░░░░██╔══╝░░██╔══██╗██║░░██╗
# ███████╗██║░░░░░██║░░██║╚█████╔╝
# ╚══════╝╚═╝░░░░░╚═╝░░╚═╝░╚════╝░
#
# [man lf(1)]
# # # # # # # # # # # # # # # # # # # #

###############################################################################
# SHELLOPTS
# █▀ █░█ █▀▀ █░░ █░░ █▀█ █▀█ ▀█▀ █▀
# ▄█ █▀█ ██▄ █▄▄ █▄▄ █▄█ █▀▀ ░█░ ▄█
###############################################################################
#--------------------------------
# Interpreter for shell commands.
#--------------------------------
set shell sh
#--------------------------------
#
#------------------------------------------------------------------------------
# Set '-eu' options for shell commands to have safer shell commands.
#     '-e' : Exit on error.
#     '-u' : Give error for unset variables.
#     '-f' : Disable pathname expansion. Useful when $f, $fs, and $fx variables
#            contain names with 'x' or '?' characters. However, this option is
#            used selectively within individual commands as it can be limiting
#            at times.
#------------------------------------------------------------------------------
set shellopts '-eu'
#------------------------------------------------------------------------------
#
#-----------------------------------------------------------------------------
# Set internal field separator (IFS) to "\n" for shell commands.
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
#-----------------------------------------------------------------------------
set ifs "\n"
#-----------------------------------------------------------------------------
###############################################################################


# leave some space at the top and the bottom of the screen
set scrolloff 10

# Use the `dim` attribute instead of underline for the cursor in the preview pane
set cursorpreviewfmt "\033[7;2m"

# use enter for shell commands
map <enter> shell

# show the result of execution of previous commands
map ` !true

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

cmd dotfiles-stage-file &{{
    if git --git-dir=$HOME/.dotfiles --work-tree=$HOME add "$f"; then
        lf -remote "send $id echo 'Highlighted file staged in dotfiles!'"
    else
        lf -remote "send $id echo 'Failed to stage highlighted file in dotfiles!'"
    fi
}}
cmd dotfiles-stage-pwd-tracked &{{
    if git --git-dir=$HOME/.dotfiles --work-tree=$HOME add --update "$PWD"; then
        lf -remote "send $id echo 'PWD staged in dotfiles!'"
    else
        lf -remote "send $id echo 'Failed to stage PWD in dotfiles!'"
    fi
}}
cmd dotfiles-restore-file &{{
    if git --git-dir=$HOME/.dotfiles --work-tree=$HOME restore "$f"; then
        lf -remote "send $id echo 'Highlighted file restored in dotfiles!'"
    else
        lf -remote "send $id echo 'Failed to restore highlighted file in dotfiles!'"
    fi
}}
cmd dotfiles-restore-pwd &{{
    if git --git-dir=$HOME/.dotfiles --work-tree=$HOME restore "$PWD"; then
        lf -remote "send $id echo 'PWD restored in dotfiles!'"
    else
        lf -remote "send $id echo 'Failed to restore PWD in dotfiles!'"
    fi
}}
cmd dotfiles-unstage-file &{{
    if git --git-dir=$HOME/.dotfiles --work-tree=$HOME reset "$f"; then
        clear
        lf -remote "send $id echo 'Highlighted file unstaged in dotfiles!'"
    else
        lf -remote "send $id echo 'Failed to unstaged highlighted file in dotfiles!'"
    fi
}}
cmd dotfiles-unstage-pwd &{{
    if git --git-dir=$HOME/.dotfiles --work-tree=$HOME reset "$PWD"; then
        clear
        lf -remote "send $id echo 'PWD unstaged in dotfiles!'"
    else
        lf -remote "send $id echo 'Failed to unstaged PWD in dotfiles!'"
    fi
}}
cmd dotfiles-status !{{
    GIT_CONFIG_PARAMETERS="'color.status=always'" git --git-dir=$HOME/.dotfiles --work-tree=$HOME status | bat
}}
cmd dotfiles-status-pwd !{{
    GIT_CONFIG_PARAMETERS="'color.status=always'" git --git-dir=$HOME/.dotfiles --work-tree=$HOME status "$PWD" | bat
}}
map <space>
map c
map <space>a dotfiles-stage-file
map <space>A dotfiles-stage-pwd-tracked
map <space>r dotfiles-restore-file
map <space>R dotfiles-restore-pwd
map <space>u dotfiles-unstage-file
map <space>U dotfiles-unstage-pwd
map <space>s dotfiles-status-pwd
map <space>S dotfiles-status
map <space>h :clear; unselect
map v toggle
map V invert

# mkdir command. See wiki if you want it to select created dir
map a :push %mkdir<space>

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ "$ans" = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd zi ${{
	result="$(zoxide query -i | sed 's/\\/\\\\/g;s/"/\\"/g')"
	lf -remote "send $id cd \"$result\""
}}

map zi zi

cmd lazygit ${{
    lazygit --path "$PWD" || lf -remote "send $id echo 'The current directory is not a git directory!'"
}}

map <space>lg lazygit

set hidden true 
set number true
set relativenumber true

###############################################################################
# PREVIEWER
# █▀█ █▀█ █▀▀ █░█ █ █▀▀ █░█░█ █▀▀ █▀█
# █▀▀ █▀▄ ██▄ ▀▄▀ █ ██▄ ▀▄▀▄▀ ██▄ █▀▄
###############################################################################
#-----------------------------------------------------
# Previewer for file previews.
#-----------------------------------------------------
#set previewer $HOME/.config/lf/scripts/previewer/scope
#-----------------------------------------------------
###############################################################################

